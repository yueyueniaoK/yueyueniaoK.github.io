{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/Crayon Shin-chan.jpg","path":"images/Crayon Shin-chan.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/boygirl.jpg","path":"images/boygirl.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cat.jpg","path":"images/cat.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/dark.gif","path":"images/dark.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/girl.jpg","path":"images/girl.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/girl2.jpg","path":"images/girl2.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/girl3.jpg","path":"images/girl3.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/girl4.jpg","path":"images/girl4.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/girl5.jpg","path":"images/girl5.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/girl6.jpg","path":"images/girl6.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/mountain.jpg","path":"images/mountain.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/sky.jpg","path":"images/sky.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/thesky.jpg","path":"images/thesky.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/forbidden.js","path":"js/forbidden.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fairyDustCursor.js","path":"js/fairyDustCursor.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/CppPrimer-面对对象程序设计.md","hash":"b164b9e309c79d504249e3f5674cab8d4a3cc529","modified":1699454553077},{"_id":"source/_posts/代码随想录-链表-设计单链表.md","hash":"8b94da1acdb5037f969d61c553aa94bf700c30f3","modified":1699454282380},{"_id":"source/tags/index.md","hash":"151e3e1746a795762a95499c8de028b23ea00195","modified":1699337258438},{"_id":"source/categories/index.md","hash":"a06e14af874b01c652f7c303a398cdbe5994b04c","modified":1699341498841},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1699334922540},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1699334922535},{"_id":"themes/next/.stylelintrc","hash":"20f46858e47aba6b3fc47e9b43e9f7531fa66e33","modified":1699334922541},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1699334922535},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1699334922535},{"_id":"themes/next/_config.yml","hash":"35a2c9e8f0f273e920da32c7dd9b1a069ac7a9d6","modified":1699362924862},{"_id":"themes/next/_vendors.yml","hash":"63da5ac3feb0faf40b9fde49426edce6d60497c2","modified":1699334922542},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1699334922569},{"_id":"themes/next/package.json","hash":"f1d7063a2e6ecbc29424752c7721b2391743e17a","modified":1699334922569},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1699334922542},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1699334922535},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1699334922541},{"_id":"themes/next/.githooks/install.js","hash":"72757c6827909a5f2c217ddbbdf6034ca6fab74a","modified":1699334922535},{"_id":"themes/next/README.md","hash":"c927b1826bc70a705f35b065f4d4c21aa8d5f17b","modified":1699334922541},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"82a3d202da8fe6ce765715bd5b7571676e90364d","modified":1699334922536},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1699334922538},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1699334922538},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"c8cfbe7cec995ccb45be8a39f4546bf4978fb3a3","modified":1699334922538},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1699334922539},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"009b397b686bba7b63885da59d904144ff59b24e","modified":1699334922537},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1699334922536},{"_id":"themes/next/.github/release.yml","hash":"83b4dae3f8d76619e208d2110a247b3ccadd64d8","modified":1699334922539},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1699334922544},{"_id":"themes/next/languages/ar.yml","hash":"c77fc13e0431e71eeb0f767a0a436284fc81df90","modified":1699334922545},{"_id":"themes/next/languages/de.yml","hash":"5101612f7cac38884206d28319532f1aab32fbe6","modified":1699334922545},{"_id":"themes/next/languages/bn.yml","hash":"30ffd43588ddf2cd39432d964087242e1c3e5407","modified":1699334922545},{"_id":"themes/next/languages/en.yml","hash":"5ca2c0b3c95dd87485f2d2b3477f88810ad1a63b","modified":1699334922545},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1699334922545},{"_id":"themes/next/languages/eo.yml","hash":"7bd0124c2d1dcdbfde350fce335e130556ebcee8","modified":1699334922546},{"_id":"themes/next/languages/es.yml","hash":"31c2a47d14cd5b804cae0c0b44d43bece069d3aa","modified":1699334922546},{"_id":"themes/next/languages/fa.yml","hash":"cc6ef3144b954daa29ce7d42f08191eafe052fab","modified":1699334922546},{"_id":"themes/next/languages/id.yml","hash":"bd2c30def05a37c66653900ca07952d52a142961","modified":1699334922547},{"_id":"themes/next/languages/fr.yml","hash":"3a7469446f77e5d1a12eee828ebc49ecb43b6c35","modified":1699334922546},{"_id":"themes/next/languages/it.yml","hash":"4969c4f17d88003135218de72ddf0bf8d894dc07","modified":1699334922547},{"_id":"themes/next/languages/ko.yml","hash":"04927e331652ee13f9c8a110fe12d7f936a6b0e6","modified":1699334922547},{"_id":"themes/next/languages/ja.yml","hash":"e660ec12b9eade103492aba7aa9b23ef06d353a9","modified":1699334922547},{"_id":"themes/next/languages/nl.yml","hash":"4575f93c4ee4383bdfaca01ad6ffff5664cbbbae","modified":1699334922547},{"_id":"themes/next/languages/ru.yml","hash":"d726265bc5cf8bd4fb64f85b2d07b3326439bb00","modified":1699334922548},{"_id":"themes/next/languages/pt-BR.yml","hash":"ff9aa6a6549d07b7dc667094f34a06945e2c21b4","modified":1699334922548},{"_id":"themes/next/languages/pt.yml","hash":"1fa9f4f4f208191afd0e6108ce89d91c657a6bd0","modified":1699334922548},{"_id":"themes/next/languages/th.yml","hash":"dc434da945d52dc7a8d26acc80b23e6922712f89","modified":1699334922548},{"_id":"themes/next/languages/si.yml","hash":"07f98d6ca99bceef35254c60fc0e4401ff608557","modified":1699334922548},{"_id":"themes/next/languages/tk.yml","hash":"7b9115e0520dc81a95a7c8e4f56a01fc84f74017","modified":1699334922548},{"_id":"themes/next/languages/tr.yml","hash":"822ec400a0a2bb2245abf31e9ed4f3af77b2814e","modified":1699334922549},{"_id":"themes/next/languages/uk.yml","hash":"10a2f2e7183410d1d10fa937e3e0198b46bf4930","modified":1699334922549},{"_id":"themes/next/languages/zh-HK.yml","hash":"6cfdc633870b814f3d75438e86f6ee5dba068987","modified":1699334922549},{"_id":"themes/next/languages/zh-CN.yml","hash":"545dca165104c11a997e8d4aff1f3cb029b22372","modified":1699339796929},{"_id":"themes/next/languages/vi.yml","hash":"8344cb90ee92a21a398faff3317c025a43446db5","modified":1699334922549},{"_id":"themes/next/languages/zh-TW.yml","hash":"198e3745b99ba5a2b75cc24d03f3412e272b7fa1","modified":1699334922550},{"_id":"themes/next/layout/_layout.njk","hash":"0f2760cd7550ca30ffcc28e2dbd7f031a237b5a7","modified":1699334922550},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1699334922566},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1699334922566},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1699334922567},{"_id":"themes/next/layout/page.njk","hash":"6d2f7e7cd9fe868e96765b82d17df49081379e27","modified":1699334922567},{"_id":"themes/next/layout/post.njk","hash":"6767de9702a07a2a4e16a8a6bc9c5919536c1e3f","modified":1699334922568},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1699334922568},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1699334922612},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1699334922536},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1699334922537},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1699334922537},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1699334922542},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1699334922543},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1699334922537},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"cd3432077a6375c0b9395abd8bf05e4909803605","modified":1699334922539},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8d27e597d8fb04818a84fc405a7e818a221e2f78","modified":1699334922540},{"_id":"themes/next/.github/workflows/lock.yml","hash":"ea346568ab811fea4dacc69081af2d6177b5aafb","modified":1699334922540},{"_id":"themes/next/.github/workflows/linter.yml","hash":"74ecdd99cc20a8f5103579210353de33536aa45c","modified":1699334922540},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dda18899fe62652c633f60c300a93df18f58862f","modified":1699334922540},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"1e4e4a7ea522b76d6fc5947ddd07260f9fecbcf4","modified":1699334922539},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1699334922543},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"e077bebf4fb89b159b840b30f0230b95ff7db8a5","modified":1699334922543},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"33d771e7c88031dd071186cbe2196a0924ba77f0","modified":1699334922550},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1699334922544},{"_id":"themes/next/layout/_macro/post.njk","hash":"8f7eaba7c3416a64d61e5bc7547645fc1c058b2a","modified":1699334922550},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"b9fc0a6b02f0380de939d1ea2a7c7d2e6be9f462","modified":1699334922551},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1699334922551},{"_id":"themes/next/layout/_partials/footer.njk","hash":"06784e9a87c983ac9f205e271235a85eae443a68","modified":1699350849831},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1699334922553},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"c55167bc0dbe7e104d4f4d782e98fcabc7e07a35","modified":1699334922554},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"9ef81adb0c35ebdb4499602155e87611aee0762a","modified":1699334922557},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"9471c4f3aeee101b9b9a8c2aae7d21ec7277574e","modified":1699334922556},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1699334922563},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1699334922563},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1699334922562},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1699334922557},{"_id":"themes/next/scripts/events/index.js","hash":"8ae618d4436dab49928c2bebc0837e5310dbe7de","modified":1699334922569},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1699334922557},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1699334922574},{"_id":"themes/next/scripts/filters/minify.js","hash":"32061a93a44a545518bb888db4438baf27e2b531","modified":1699334922574},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1699334922574},{"_id":"themes/next/scripts/filters/post.js","hash":"e6cf4c94fc2291215a3345134ddbbc74d5091b00","modified":1699334922575},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1699334922575},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1699334922575},{"_id":"themes/next/layout/_third-party/index.njk","hash":"9bab629e2971b029545511b48f397445858ac7f0","modified":1699334922562},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1699334922576},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"2e8dcc12a52517bb4e00ea611720bcd298624112","modified":1699334922576},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"9fb14a35082b3171d558ca44776d59df64f4fe95","modified":1699334922576},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"42c295f764f12ade0a91378d00249374a12c7309","modified":1699334922577},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"ceff5e76564a5d6ed3e0222bccf581e106d80f3c","modified":1699334922576},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1699334922577},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1699334922577},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1699334922578},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1699334922578},{"_id":"themes/next/scripts/tags/index.js","hash":"1a680bb01e14152905efe3ef624621dd74cf27c3","modified":1699334922578},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1699334922579},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1699334922579},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1699334922579},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1699334922579},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1699334922580},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1699334922580},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1699334922580},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"188c1dd5d7dbc566cac00946da86aa76fff1c682","modified":1699334922580},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1699334922581},{"_id":"themes/next/source/css/_mixins.styl","hash":"eacfdd1795ccc0138e194fbf9381d3a64b5ba130","modified":1699334922595},{"_id":"themes/next/source/css/main.styl","hash":"c326550ce8b4deaa9b647bcfe3cdc04c100644e6","modified":1699334922600},{"_id":"themes/next/source/images/Crayon Shin-chan.jpg","hash":"ecdbe82f1c8218deca1d8258d67e6afd728bbabe","modified":1699335363669},{"_id":"themes/next/docs/zh-CN/README.md","hash":"3d1d53536269046c379c1bb75fa31b56ba530e3b","modified":1699334922544},{"_id":"themes/next/docs/ru/README.md","hash":"743bed1823f55878a6e5772e39745737fd0eff3d","modified":1699334922543},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1699334922601},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1699334922601},{"_id":"themes/next/source/css/noscript.styl","hash":"64b378a4d2f0b36bf666fba13b57c59da3a8ac83","modified":1699334922601},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1699334922601},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1699334922602},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1699334922602},{"_id":"themes/next/source/images/girl3.jpg","hash":"57a3ea70c8c90f162eae08ef67a238550df51c23","modified":1699349284122},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1699334922602},{"_id":"themes/next/source/images/girl6.jpg","hash":"f550578bfa1bc3b31869a95393acdcca435c27f5","modified":1699349825276},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1699334922603},{"_id":"themes/next/source/images/thesky.jpg","hash":"d7abf221804aee4224b991660143c6264b457a1d","modified":1699341981424},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1699334922603},{"_id":"themes/next/source/js/forbidden.js","hash":"762e655175c7cdc6bff36a37590ff9e8f51ae9f5","modified":1699359019660},{"_id":"themes/next/source/js/motion.js","hash":"d4c01d5317d45444e91a52236b751c9e9ab1bc16","modified":1699334922603},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1699334922602},{"_id":"themes/next/source/js/next-boot.js","hash":"8759690669651d76d6eeca6e2a0f79aa898fc03c","modified":1699334922603},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1699334922603},{"_id":"themes/next/source/js/utils.js","hash":"901d99cb8c45ff194971124e244e6a14e879134c","modified":1699334922611},{"_id":"themes/next/source/js/pjax.js","hash":"c999bfc7cad747e3da0fe3d75c31dd933bf63016","modified":1699334922604},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1699334922612},{"_id":"themes/next/source/js/fairyDustCursor.js","hash":"afbf8267254da37e6fd123aa79a81449d4e63375","modified":1699361106355},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1699334922612},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1699334922613},{"_id":"themes/next/test/helpers/next-url.js","hash":"ea379af44770c2b32263839d4b5394065a15fd4b","modified":1699334922612},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1699334922604},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1699334922614},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1699334922613},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1699334922613},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1699334922613},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1699334922614},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1699334922614},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1699334922615},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1699334922614},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1699334922615},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"e016c3f80db433f17781caf26e44f2089a71550a","modified":1699334922552},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1699334922551},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"7bf2b6ab499775355bbf8f3ae597ff7bc00e89e4","modified":1699334922552},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1699334922552},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1699334922552},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1699334922552},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1699334922552},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1699334922553},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1699334922553},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1699334922553},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1699334922553},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1699334922553},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"22c922214982c4bb78ea92fa2ff1de93d98216a3","modified":1699334922554},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebe45ab38ace03ea74eed3f676ec1cb5805a3c8a","modified":1699334922554},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"fd6fde597ea2fb7b80cffd0a3553c8e73acb8ab2","modified":1699334922555},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1699334922555},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"9a7eda45ad0753d5f624c51a56e00277ba97c93d","modified":1699334922555},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"8a6414987474592e82b3e57eeb0bd526ae42d235","modified":1699334922555},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1699334922556},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1699334922556},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1699334922556},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"8d76300e31178e790400a37adfaf9bc0e5f8fae7","modified":1699334922556},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1699334922558},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1699334922558},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1699334922558},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1699334922558},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"81abcf790cf97395cde9e3cd6d5d1aa5656bd134","modified":1699334922558},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"43238bc1bc2e88d707f8097814ef3ff830cbe641","modified":1699334922559},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1699334922559},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"64ed6fecae79f9f9c61e956d2bd077792473e069","modified":1699334922559},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"c8b8c10dcf5c4ffa4a8aec5ba5892842ec204ac0","modified":1699334922559},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1699334922560},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1699334922560},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1699334922560},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1699334922561},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1699334922561},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1699334922561},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1699334922561},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1699334922561},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1699334922562},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1699334922563},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1699334922563},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1699334922563},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1699334922564},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1699334922564},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1699334922565},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1699334922566},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"baec18165d767094ecb2dda7141ca3bd8c6f2eb9","modified":1699334922566},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1699334922564},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1699334922565},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1699334922564},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1699334922565},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1699334922570},{"_id":"themes/next/scripts/events/lib/config.js","hash":"7c29184a37222d6499c5220264fda6942afc03a9","modified":1699334922570},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1699334922570},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1699334922570},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"48fed05ba4efffeeb1aaed2190ae6e7d0ea04e99","modified":1699334922571},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1699334922615},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"c2f9b18d2958329d5f124d9ad3fea21a326e106c","modified":1699334922571},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"761760031e49edb77277bd4a8582774959240d6b","modified":1699334922571},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1699334922572},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1699334922572},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1699334922572},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"4dbe9652ae53a181c86eb7e9005a5255f0540055","modified":1699334922572},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1699334922572},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1699334922573},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1699334922573},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1699334922573},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1699334922599},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1699334922615},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"77d9c468897283223cdc922eb7e146ca7a83420c","modified":1699334922599},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c8b101c76b179877a22256922a56d30d0926bc51","modified":1699334922600},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1699334922616},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5cff12a5c9fc55a68f0f57a291494cd738301ba4","modified":1699334922605},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1699334922599},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1699334922609},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5092cacdfbc482996d0bee9fdf2c37d8d3ae863c","modified":1699334922599},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"969c3797d4315a2873aa143d0674d251fa0c5703","modified":1699334922581},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"49c3063b46d65796003a822deed971abee41675e","modified":1699334922581},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1699334922585},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1699334922588},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"db9e807cc8531ee0052f7cdf6a4cb92a8add3fd2","modified":1699334922588},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1699334922591},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1699334922591},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1699334922592},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1699334922591},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"fd4a2d2303f107a021837aa6e3d977c2f9d14c42","modified":1699334922593},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1699334922592},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1699334922593},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"aa34abe71ad476922a0371bcac82cd8e5b45d383","modified":1699334922595},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"cbfc803169653c3962efbe3569c2eb10c3f942ef","modified":1699350929639},{"_id":"themes/next/source/js/schemes/muse.js","hash":"aa84bdd853a9b0646ad9157e26df949ba0ec57c3","modified":1699334922605},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"e3022c2ea60409a82a3e2a0d3615e4a25c684551","modified":1699334922608},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1699334922609},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"2db5ada757f7ffb9a36b06400cf30d80ec039b6e","modified":1699334922596},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1699334922596},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"6630a642ad2311ec09466c962963c006c4df4c38","modified":1699334922598},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5393f045f12b1eb9373c421627727f40f5b148e7","modified":1699334922598},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e06e0fd44e39838ce22ac7829a2421f8c9e1b12d","modified":1699334922598},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1699334922598},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1699334922599},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1699334922596},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"2f19fe2aba8f63fc99641e50bcb96cc9a4feb8a4","modified":1699334922597},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1699334922599},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"be9d0e9493802c22f16a0645a59d0c2b556c1c3c","modified":1699334922596},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"68f8d30071516913a7a958e01d010e8a93f7aa24","modified":1699334922596},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1699334922597},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8b21da21dd1f34505875619bfd355ba1f826d7a7","modified":1699334922597},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"e6e8892fccb02bff163d9b574984e0440a00d756","modified":1699334922597},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"06835446a1c7353f434a9527889a53d6be69766c","modified":1699334922597},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1699334922597},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1699334922605},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1699334922605},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"f24604710002234f18a7b5cfe9ccdf3ed6e725a8","modified":1699334922606},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1699334922605},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1699334922606},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1699334922606},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1699334922607},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"07e0038b221b9a4fd8ccac75093de3dee1f8315e","modified":1699334922607},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1699334922607},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"5673d28509a8e837a512da490a88b7bf5162fc49","modified":1699334922607},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1699334922608},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1699334922606},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1699334922607},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1699334922608},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1699334922609},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1699334922610},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"ce12b5007c9aa997738641c06a1c081c357e27bd","modified":1699334922610},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"99bb6c073842873d4a4da6fadb0d2a1f70864a35","modified":1699334922611},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"7db3233f0b33870943ce1547326a67f9e628b411","modified":1699334922610},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"aa04527f76de7646573ea327d4f6145200d6070d","modified":1699334922582},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"6d8827b14ea1af16bfa21e194006ba9fa10ce50b","modified":1699334922582},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ffcaf94d0de9e7292c320225541d5550d4f0ba56","modified":1699334922583},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"7245d8364092c2d184e658e801ba94815a2a1f81","modified":1699334922583},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1699334922583},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"4790d37a40b80f7278ec55274f017dad21791038","modified":1699334922583},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d514d09525256d510c83829aa6895bb40678d576","modified":1699334922584},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1699334922610},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1699334922584},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"777efaacbabb623f1d77fac5dd784401f8dea4cd","modified":1699334922584},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a698c3adba896a46e26850967cb73295c521940","modified":1699334922584},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1699334922581},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1699334922581},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1699334922582},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1699334922582},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1699334922582},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"a2ffaa06c963514a79fda52665e707af6e8e2f5e","modified":1699334922585},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"8a7b70ef14c7110aaceb30ea2f7eb4b202f0f0cd","modified":1699334922585},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1699334922586},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1699334922586},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"406c03be3cf8a8411227bc1fecf942ca368f7e2a","modified":1699334922585},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1699334922587},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1699334922587},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"39066b4e2e914d85736c9c33fa51f21a3f86c0e4","modified":1699334922587},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1699334922587},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"038625515ba4760e4dda6792549bddc0db5a3d20","modified":1699334922588},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"dce8ea62d7d7b08a0444fbb2f617be30bfcfc152","modified":1699334922588},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"dd84ccb5a6b8e79b0cbdd1d7ea8e4fca8d2cc97c","modified":1699334922588},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1699334922588},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"bdfef8d2363bc199dfbcc23ee833edca27cc9fcf","modified":1699334922589},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b3689beb90cda64cafecaf6b25981fe8a9525992","modified":1699334922589},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"63fb6d36d9ea62c7e39274c666e102b12f64ff77","modified":1699334922589},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1699334922589},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"f5c1a6afcd2d460ccd5987ef1af747fc99d3ea72","modified":1699334922590},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"f8a97aad14e0b16b555ee0048da5402f818f9693","modified":1699334922589},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"8f82d5141a18f6319e0609a3f6e4fcca6d442203","modified":1699334922590},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"cbc6b0938a2e60f35a5df32210904fb16e4938da","modified":1699334922590},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"509bad7d1d6b5c6f24a3f205b2ed7b65a2326dd4","modified":1699334922590},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1699334922590},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1699334922611},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"9cafc8f751581d496f1f3c056b95f3b8e1ebbf4e","modified":1699334922611},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1699334922593},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"333f48b1107c63e992fdbe1290eeb2a7cc1d7a0c","modified":1699334922592},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1699334922593},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1699334922594},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"1772ade171aa6bd806909d69003cfc498c3af019","modified":1699334922593},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1699334922594},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1699334922593},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"41c0516f76513036e30a70509a6d33e8a79bdba2","modified":1699334922591},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"3324e9d09faf3903bc9815358bda4000bbb691fa","modified":1699334922594},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1699334922594},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"2f4c791b5999b2e1a707bd473c1db7c21d206a27","modified":1699334922595},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"ed76879122ad1b62d210522de4037808644a590d","modified":1699334922595},{"_id":"themes/next/source/images/cat.jpg","hash":"b77e525f15ad30dcbff57485499d3c932f25bb7a","modified":1699343279759},{"_id":"themes/next/source/images/girl4.jpg","hash":"5b1993b6d2747ab3f04f4270e0e0c18aedb56456","modified":1699349781254},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"98a233884b1953952b8364895617fe53def60038","modified":1699334922591},{"_id":"themes/next/source/images/girl.jpg","hash":"d016222161373cda898eb3ddd7e7fe95e4fa653a","modified":1699348689925},{"_id":"themes/next/source/images/alipay.jpg","hash":"70e91aaea8bfe8e56a8a66617bc52caad2a37445","modified":1699339387017},{"_id":"themes/next/source/images/girl2.jpg","hash":"8f3e1fdf6ebfdcd5dc30a9c1eabe60ab1f5c27ae","modified":1699349271390},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"4c16e857039d61ea98ccc89e0915b75481891d8e","modified":1699339373114},{"_id":"themes/next/source/images/girl5.jpg","hash":"6782320ebd91936ecee4f6e5c51b73ffcdb184e9","modified":1699349799318},{"_id":"themes/next/source/images/boygirl.jpg","hash":"9848cb8c884537ad857ab36a4acb15280b25922f","modified":1699346879892},{"_id":"themes/next/source/images/mountain.jpg","hash":"e8074aa1f490752d6c7bba650367817a4744b8d6","modified":1699347580054},{"_id":"themes/next/source/images/dark.gif","hash":"8fb5a1c7b7d3e247b8ef18df3ca26a2e3a22559a","modified":1699345264748},{"_id":"themes/next/source/images/sky.jpg","hash":"90950f6488a5aa64bc098b75d9e7a1ed778cef6a","modified":1699347267155},{"_id":"public/search.xml","hash":"12271f79bca4574a972b05873fe3ac1955cef127","modified":1701737411045},{"_id":"public/tags/index.html","hash":"f6e943b8eb2e146ce8fdb38f0e3d1bda1f4debce","modified":1701737411045},{"_id":"public/categories/index.html","hash":"dc22c4080392d6d5e7516c9d3fe20bc67a4043a7","modified":1701737411045},{"_id":"public/2023/11/08/CppPrimer-面对对象程序设计/index.html","hash":"a6b9d6080a8bc0543dcaec74050671ee56271f9d","modified":1701737411045},{"_id":"public/archives/2023/11/index.html","hash":"fe36a9a1b46e24bd589b06e584673d5c5d140400","modified":1701737411045},{"_id":"public/archives/index.html","hash":"045d5b352e16d611173e9195d8cea9c1481c9524","modified":1701737411045},{"_id":"public/archives/2023/index.html","hash":"444f03390d380e5c0a7b4a039d7695fe8f89783d","modified":1701737411045},{"_id":"public/categories/C-学习/index.html","hash":"da2e9df048797ab40182ff9e44a05ee2d90a6bd4","modified":1701737411045},{"_id":"public/categories/数据结构/index.html","hash":"e929b4505d08d2ca5f8284434a40e272fd692bae","modified":1701737411045},{"_id":"public/tags/C/index.html","hash":"ab1f04277526dfbbde47e4b7519d84639c5bae50","modified":1701737411045},{"_id":"public/tags/算法/index.html","hash":"62d1013ea92437e7dfa13b0d0ab9e827fe7e75c2","modified":1701737411045},{"_id":"public/2023/11/07/代码随想录-链表-设计单链表/index.html","hash":"28610d51e34c1e776d53bbae52d8deecdd600cb1","modified":1701737411045},{"_id":"public/index.html","hash":"71c118ae75369d24ee92a503c45def54fe510e5e","modified":1701737411045},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1699454470277},{"_id":"public/images/Crayon Shin-chan.jpg","hash":"ecdbe82f1c8218deca1d8258d67e6afd728bbabe","modified":1699454470277},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1699454470277},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1699454470277},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1699454470277},{"_id":"public/images/girl3.jpg","hash":"57a3ea70c8c90f162eae08ef67a238550df51c23","modified":1699454470277},{"_id":"public/images/girl6.jpg","hash":"f550578bfa1bc3b31869a95393acdcca435c27f5","modified":1699454470277},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1699454470277},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1699454470277},{"_id":"public/images/cat.jpg","hash":"b77e525f15ad30dcbff57485499d3c932f25bb7a","modified":1699454470277},{"_id":"public/images/girl2.jpg","hash":"8f3e1fdf6ebfdcd5dc30a9c1eabe60ab1f5c27ae","modified":1699454470277},{"_id":"public/images/girl4.jpg","hash":"5b1993b6d2747ab3f04f4270e0e0c18aedb56456","modified":1699454470277},{"_id":"public/images/girl5.jpg","hash":"6782320ebd91936ecee4f6e5c51b73ffcdb184e9","modified":1699454470277},{"_id":"public/images/thesky.jpg","hash":"d7abf221804aee4224b991660143c6264b457a1d","modified":1699454470277},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1699454470277},{"_id":"public/css/main.css","hash":"fca9989c7dd0e5d95e0469ca72cd9a5ace4f1bf3","modified":1699454470277},{"_id":"public/images/alipay.jpg","hash":"70e91aaea8bfe8e56a8a66617bc52caad2a37445","modified":1699454470277},{"_id":"public/images/girl.jpg","hash":"d016222161373cda898eb3ddd7e7fe95e4fa653a","modified":1699454470277},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1699454470277},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1699454470277},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1699454470277},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1699454470277},{"_id":"public/js/forbidden.js","hash":"667a4461562373a825f209f898888d60f74d61e7","modified":1699454470277},{"_id":"public/js/fairyDustCursor.js","hash":"4e78578d5a772fc091c533171f3f493aa5e93432","modified":1699454470277},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1699454470277},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1699454470277},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1699454470277},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1699454470277},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1699454470277},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1699454470277},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1699454470277},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1699454470277},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1699454470277},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1699454470277},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1699454470277},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1699454470277},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1699454470277},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1699454470277},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1699454470277},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1699454470277},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1699454470277},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1699454470277},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1699454470277},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1699454470277},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1699454470277},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1699454470277},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1699454470277},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1699454470277},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1699454470277},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1699454470277},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1699454470277},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1699454470277},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1699454470277},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1699454470277},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1699454470277},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1699454470277},{"_id":"public/images/wechatpay.jpg","hash":"4c16e857039d61ea98ccc89e0915b75481891d8e","modified":1699454470277},{"_id":"public/images/mountain.jpg","hash":"e8074aa1f490752d6c7bba650367817a4744b8d6","modified":1699454470277},{"_id":"public/images/boygirl.jpg","hash":"9848cb8c884537ad857ab36a4acb15280b25922f","modified":1699454470277},{"_id":"public/images/dark.gif","hash":"8fb5a1c7b7d3e247b8ef18df3ca26a2e3a22559a","modified":1699454470277},{"_id":"public/images/sky.jpg","hash":"90950f6488a5aa64bc098b75d9e7a1ed778cef6a","modified":1699454470277},{"_id":"source/_posts/C++模板.md","hash":"ce28dc7033f1955c194de35ed53324c6759df01d","modified":1700557014310},{"_id":"public/2023/11/21/C++模板/index.html","hash":"99336178ebb028ecf90f888b726b4e5a1d9bb734","modified":1700557280726},{"_id":"source/_posts/CPP模板.md","hash":"51851f7f50a1681e7a114a9a060dd06f3d25fa62","modified":1701702880157},{"_id":"public/2023/11/21/CPP模板/index.html","hash":"05370d719c2935bc0bfac25193f7485b1aac1488","modified":1701737411045},{"_id":"source/_posts/数据结构-查找-有序表.md","hash":"b3469a7eb11ae6c9fb8d6eed6984a8d7175f4966","modified":1701703080918},{"_id":"public/archives/2023/12/index.html","hash":"ee0ed3a69aa3151c547ce9d8ad7e59e69196b74b","modified":1701737411045},{"_id":"public/categories/大话数据结构/index.html","hash":"443d1ad6decef3555b0577d6c0159b5096506bac","modified":1701737411045},{"_id":"public/2023/12/04/数据结构-查找-有序表/index.html","hash":"159b68bf46e6ed7627b8701d77482af88105409d","modified":1701737411045}],"Category":[{"name":"C++学习","_id":"clopvba1r0004akuch7q11clw"},{"name":"数据结构","_id":"clopvba1t0006akucfuwohpsj"},{"name":"大话数据结构","_id":"clpr238520001n4ucgel0a1oa"}],"Data":[],"Page":[{"title":"标签","date":"2023-11-07T06:05:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2023-11-07 14:05:42\ntype: tags\n---\n","updated":"2023-11-07T06:07:38.438Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clopvba1h0000akucezsg6dm0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2023-11-07T06:07:53.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-11-07 14:07:53\ntype: categories\n---\n","updated":"2023-11-07T07:18:18.841Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clopvba1o0002akuc5rsf0myb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"C++Primer-面对对象程序设计","date":"2023-11-08T03:18:02.000Z","_content":"","source":"_posts/CppPrimer-面对对象程序设计.md","raw":"---\ntitle: C++Primer-面对对象程序设计\ndate: 2023-11-08 11:18:02\ntags: C++\ncategories: C++学习\n---\n","slug":"CppPrimer-面对对象程序设计","published":1,"updated":"2023-11-08T14:42:33.077Z","_id":"clopvba1l0001akuc1mfo09um","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"设计单链表","date":"2023-11-07T06:52:25.000Z","_content":"\n~~~C++\nclass MyLinkedList {\npublic:\n    struct LinkedNode\n    {\n        int val;\n        LinkedNode *next;\n        LinkedNode(int val):val(val),next(nullptr){}\n    };\n\n    MyLinkedList() {\n        head = new LinkedNode(0);\n        size = 0;\n    }   \n    \n    int get(int index) {\n        if(index < 0||index >= size)\n            return -1;\n        LinkedNode *p= head->next;\n        while(index--)   \n            p = p->next;\n        return p->val;  \n    }\n    \n    void addAtHead(int val) {\n        LinkedNode *p = new LinkedNode(val);\n        p->next = head->next; \n        head->next = p;\n        size++;\n    }\n    \n    void addAtTail(int val) {\n        LinkedNode *p = head;\n        while(p->next!=NULL) \n            p=p->next;\n        LinkedNode *r = new LinkedNode(val);\n        p->next = r;\n        size++;\n    }\n    \n    void addAtIndex(int index, int val) {\n        if(index<0||index>size) return;\n        LinkedNode *p = head,*r = new LinkedNode(val);\n        while(index--)\n            p = p->next;\n        r->next = p->next;\n        p->next = r;\n        size++;\n    }\n    \n    void deleteAtIndex(int index) {\n        if(index<0||index>=size) return;\n        else\n        {\n            LinkedNode *p=head,*r = NULL;\n            while(index--)\n                p=p->next;\n            r = p->next;\n            p->next = p->next->next;\n            size--;\n        }\n    }\nprivate:\n        LinkedNode *head;\n        int size;\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */\n~~~\n\n","source":"_posts/代码随想录-链表-设计单链表.md","raw":"---\n\ntitle: 设计单链表\n\ndate: 2023-11-07 14:52:25\n\ntags: 算法\n\ncategories: 数据结构\n\n---\n\n~~~C++\nclass MyLinkedList {\npublic:\n    struct LinkedNode\n    {\n        int val;\n        LinkedNode *next;\n        LinkedNode(int val):val(val),next(nullptr){}\n    };\n\n    MyLinkedList() {\n        head = new LinkedNode(0);\n        size = 0;\n    }   \n    \n    int get(int index) {\n        if(index < 0||index >= size)\n            return -1;\n        LinkedNode *p= head->next;\n        while(index--)   \n            p = p->next;\n        return p->val;  \n    }\n    \n    void addAtHead(int val) {\n        LinkedNode *p = new LinkedNode(val);\n        p->next = head->next; \n        head->next = p;\n        size++;\n    }\n    \n    void addAtTail(int val) {\n        LinkedNode *p = head;\n        while(p->next!=NULL) \n            p=p->next;\n        LinkedNode *r = new LinkedNode(val);\n        p->next = r;\n        size++;\n    }\n    \n    void addAtIndex(int index, int val) {\n        if(index<0||index>size) return;\n        LinkedNode *p = head,*r = new LinkedNode(val);\n        while(index--)\n            p = p->next;\n        r->next = p->next;\n        p->next = r;\n        size++;\n    }\n    \n    void deleteAtIndex(int index) {\n        if(index<0||index>=size) return;\n        else\n        {\n            LinkedNode *p=head,*r = NULL;\n            while(index--)\n                p=p->next;\n            r = p->next;\n            p->next = p->next->next;\n            size--;\n        }\n    }\nprivate:\n        LinkedNode *head;\n        int size;\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */\n~~~\n\n","slug":"代码随想录-链表-设计单链表","published":1,"updated":"2023-11-08T14:38:02.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clopvba1p0003akuc3ixcfabj","content":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedNode</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        LinkedNode *next;</span><br><span class=\"line\">        <span class=\"built_in\">LinkedNode</span>(<span class=\"type\">int</span> val):<span class=\"built_in\">val</span>(val),<span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>)&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">MyLinkedList</span>() &#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>||index &gt;= size)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        LinkedNode *p= head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)   </span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;val;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode *p = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        p-&gt;next = head-&gt;next; </span><br><span class=\"line\">        head-&gt;next = p;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode *p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p-&gt;next!=<span class=\"literal\">NULL</span>) </span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        LinkedNode *r = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        p-&gt;next = r;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>||index&gt;size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        LinkedNode *p = head,*r = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        r-&gt;next = p-&gt;next;</span><br><span class=\"line\">        p-&gt;next = r;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>||index&gt;=size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            LinkedNode *p=head,*r = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(index--)</span><br><span class=\"line\">                p=p-&gt;next;</span><br><span class=\"line\">            r = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = p-&gt;next-&gt;next;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">        LinkedNode *head;</span><br><span class=\"line\">        <span class=\"type\">int</span> size;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj-&gt;get(index);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;addAtHead(val);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;addAtTail(val);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLinkedList</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">LinkedNode</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        LinkedNode *next;</span><br><span class=\"line\">        <span class=\"built_in\">LinkedNode</span>(<span class=\"type\">int</span> val):<span class=\"built_in\">val</span>(val),<span class=\"built_in\">next</span>(<span class=\"literal\">nullptr</span>)&#123;&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">MyLinkedList</span>() &#123;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &lt; <span class=\"number\">0</span>||index &gt;= size)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        LinkedNode *p= head-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)   </span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p-&gt;val;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtHead</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode *p = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        p-&gt;next = head-&gt;next; </span><br><span class=\"line\">        head-&gt;next = p;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtTail</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        LinkedNode *p = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p-&gt;next!=<span class=\"literal\">NULL</span>) </span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        LinkedNode *r = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        p-&gt;next = r;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>||index&gt;size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        LinkedNode *p = head,*r = <span class=\"keyword\">new</span> <span class=\"built_in\">LinkedNode</span>(val);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index--)</span><br><span class=\"line\">            p = p-&gt;next;</span><br><span class=\"line\">        r-&gt;next = p-&gt;next;</span><br><span class=\"line\">        p-&gt;next = r;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteAtIndex</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;<span class=\"number\">0</span>||index&gt;=size) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            LinkedNode *p=head,*r = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(index--)</span><br><span class=\"line\">                p=p-&gt;next;</span><br><span class=\"line\">            r = p-&gt;next;</span><br><span class=\"line\">            p-&gt;next = p-&gt;next-&gt;next;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">        LinkedNode *head;</span><br><span class=\"line\">        <span class=\"type\">int</span> size;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * MyLinkedList* obj = new MyLinkedList();</span></span><br><span class=\"line\"><span class=\"comment\"> * int param_1 = obj-&gt;get(index);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;addAtHead(val);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;addAtTail(val);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;addAtIndex(index,val);</span></span><br><span class=\"line\"><span class=\"comment\"> * obj-&gt;deleteAtIndex(index);</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"C++模板","date":"2023-11-21T08:57:28.000Z","_content":"## 模板定义\n\n### 1函数模板定义\n\n##### 1.1函数模板\n\n```C++\ntemplate<typename T,typename U>\n```\n\n**模板定义**以关键字**template**开始，后面跟着一个**模板参数列表（template parameter list**），**模板参数（template parameter）**用逗号分隔开，用小于号**<**和大于号**>**包围起来。\n\n**<font color = red>Note：模板参数列表不能为空</font>**\n\n##### 1.2实例化函数模板\n\n当我们调用一个函数模板时，编译器会根据函数实参推断出模板实参，用推断出的模板参数为我们**实例化（instantiate）**一个特定版本的函数，编译器生成的版本通常被称为**模板的实例（instantiation）**。\n\n```C++\n//compare的函数模板\ntemplate<typename T>\nint compare(const T&v1,const T&v2)\n{\n\tif(v1 < v2) return 1;\n\tif(v2 < v1) return -1;\n\treturn 0;\n}\n\n//当我们使用compare函数模板时\ncout<<compare(1,0)<<endl;\n\n//编译器实例化compare的实例\nint compare(const int &v1,const int &v2)\n{\n\tif(v1 < v2) return 1;\n\tif(v2 < v1) return -1;\n\treturn 0;\n}\n```\n\n##### 1.3模板类型参数和非模板类型参数\n\n模板类型参数\n\n```C++\ntemplate<typename T,class U>\n```\n\n模板类型参数前面必须使用关键字**typename**或者**class**，**模板类型参数（template parameter)**可以看作为类型说明符，像内置类型和类类型一样使用。\n\n<font color = gree>非模板类型参数</font>\n\n<font color= gree>非模板类型参数可以是一个整型、指向对象或函数类型的指针或者引用，绑定到非类型整型参数必须是一个常量表达式，绑定到指针或引用非类型参数的实参必须具有静态的生存期,不能用一个普通的局部变量或动态对象作为指针或引用类型模板参数的实参。在需要常量表达式的地方，可以使用非类型参数，比如数组的大小</font>\n\n<font color  = red>Note：非模板类型参数必须是常量表达式</font>\n\n函数模板可以声明**inline**和**constexpr**，放在模板参数列表之后，返回类型之前。\n\n```C++\ntemplate<typename T> inline int compare(const T &v1,const T &v2)\n```\n\n##### 1.4尽量编写类型无关的代码\n\n如上面compare函数例子，编写泛型编程代码的两个重要原则：\n\n1. 模板中的函数参数是const的引用；（可以保证函数可以用不能拷贝的类型）\n2. 函数体中的条件判断仅使用<比较运算；（可以降低对要处理的类型的要求）\n\n<font color = red>Best Practices:模板程序应该尽量减少对实参类型的要求</font>\n\n![](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-23-04%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91.png))\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-05.png)\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-50.png)\n\n### 2类模板定义\n\n##### 2.1类模板\n\n```C++\ntemplate<typename T>\n类的定义\n```\n\n```C++\ntemplate <typename T>\nclass Blob\n{\npublic:\n    typedef T value_type:\n    typedef typename std::vector<T>::size_type size_type;\n    //构造函数\n    Blob();\n    Blob(std::initializer_list<T> il);\n    //Blob中的元素数目\n    size_type size() const {return data->size();}\n\tbool  empty() const {return data->empty();}\n    //添加和删除元素\n    void pysh_back(const T &t) {data->push_back(t);}\n    //移动版本\n    void push_back(T &&t) {data->push_back(std::move(t));\n    void pop_back()\n  \t//元素访问\n    T& back();\n    T& operator[](size_type i);\nprivate:\n    std::shared_ptr<std::vector<T>> data;\n    //若data[i]无效，则抛出msg\n    void check(size_)\n        \n}\n```\n\n<font color = red>size_type是string和vector类类型定义的类型，用来保存string和vector对象的长度，标准库类型将size_type定义为unsigned类型。</font>","source":"_posts/CPP模板.md","raw":"---\n\ntitle: C++模板\n\ndate: 2023-11-21 16:57:28\n\ntags: C++\n\ncategories: C++学习\n\n---\n## 模板定义\n\n### 1函数模板定义\n\n##### 1.1函数模板\n\n```C++\ntemplate<typename T,typename U>\n```\n\n**模板定义**以关键字**template**开始，后面跟着一个**模板参数列表（template parameter list**），**模板参数（template parameter）**用逗号分隔开，用小于号**<**和大于号**>**包围起来。\n\n**<font color = red>Note：模板参数列表不能为空</font>**\n\n##### 1.2实例化函数模板\n\n当我们调用一个函数模板时，编译器会根据函数实参推断出模板实参，用推断出的模板参数为我们**实例化（instantiate）**一个特定版本的函数，编译器生成的版本通常被称为**模板的实例（instantiation）**。\n\n```C++\n//compare的函数模板\ntemplate<typename T>\nint compare(const T&v1,const T&v2)\n{\n\tif(v1 < v2) return 1;\n\tif(v2 < v1) return -1;\n\treturn 0;\n}\n\n//当我们使用compare函数模板时\ncout<<compare(1,0)<<endl;\n\n//编译器实例化compare的实例\nint compare(const int &v1,const int &v2)\n{\n\tif(v1 < v2) return 1;\n\tif(v2 < v1) return -1;\n\treturn 0;\n}\n```\n\n##### 1.3模板类型参数和非模板类型参数\n\n模板类型参数\n\n```C++\ntemplate<typename T,class U>\n```\n\n模板类型参数前面必须使用关键字**typename**或者**class**，**模板类型参数（template parameter)**可以看作为类型说明符，像内置类型和类类型一样使用。\n\n<font color = gree>非模板类型参数</font>\n\n<font color= gree>非模板类型参数可以是一个整型、指向对象或函数类型的指针或者引用，绑定到非类型整型参数必须是一个常量表达式，绑定到指针或引用非类型参数的实参必须具有静态的生存期,不能用一个普通的局部变量或动态对象作为指针或引用类型模板参数的实参。在需要常量表达式的地方，可以使用非类型参数，比如数组的大小</font>\n\n<font color  = red>Note：非模板类型参数必须是常量表达式</font>\n\n函数模板可以声明**inline**和**constexpr**，放在模板参数列表之后，返回类型之前。\n\n```C++\ntemplate<typename T> inline int compare(const T &v1,const T &v2)\n```\n\n##### 1.4尽量编写类型无关的代码\n\n如上面compare函数例子，编写泛型编程代码的两个重要原则：\n\n1. 模板中的函数参数是const的引用；（可以保证函数可以用不能拷贝的类型）\n2. 函数体中的条件判断仅使用<比较运算；（可以降低对要处理的类型的要求）\n\n<font color = red>Best Practices:模板程序应该尽量减少对实参类型的要求</font>\n\n![](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-23-04%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91.png))\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-05.png)\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-50.png)\n\n### 2类模板定义\n\n##### 2.1类模板\n\n```C++\ntemplate<typename T>\n类的定义\n```\n\n```C++\ntemplate <typename T>\nclass Blob\n{\npublic:\n    typedef T value_type:\n    typedef typename std::vector<T>::size_type size_type;\n    //构造函数\n    Blob();\n    Blob(std::initializer_list<T> il);\n    //Blob中的元素数目\n    size_type size() const {return data->size();}\n\tbool  empty() const {return data->empty();}\n    //添加和删除元素\n    void pysh_back(const T &t) {data->push_back(t);}\n    //移动版本\n    void push_back(T &&t) {data->push_back(std::move(t));\n    void pop_back()\n  \t//元素访问\n    T& back();\n    T& operator[](size_type i);\nprivate:\n    std::shared_ptr<std::vector<T>> data;\n    //若data[i]无效，则抛出msg\n    void check(size_)\n        \n}\n```\n\n<font color = red>size_type是string和vector类类型定义的类型，用来保存string和vector对象的长度，标准库类型将size_type定义为unsigned类型。</font>","slug":"CPP模板","published":1,"updated":"2023-12-04T15:14:40.157Z","_id":"clp83w7120000k0uc7ptfa576","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"模板定义\"><a href=\"#模板定义\" class=\"headerlink\" title=\"模板定义\"></a>模板定义</h2><h3 id=\"1函数模板定义\"><a href=\"#1函数模板定义\" class=\"headerlink\" title=\"1函数模板定义\"></a>1函数模板定义</h3><h5 id=\"1-1函数模板\"><a href=\"#1-1函数模板\" class=\"headerlink\" title=\"1.1函数模板\"></a>1.1函数模板</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span> U&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>模板定义</strong>以关键字<strong>template</strong>开始，后面跟着一个<strong>模板参数列表（template parameter list</strong>），<strong>模板参数（template parameter）</strong>用逗号分隔开，用小于号**&lt;**和大于号**&gt;**包围起来。</p>\n<p><strong><font color = red>Note：模板参数列表不能为空</font></strong></p>\n<h5 id=\"1-2实例化函数模板\"><a href=\"#1-2实例化函数模板\" class=\"headerlink\" title=\"1.2实例化函数模板\"></a>1.2实例化函数模板</h5><p>当我们调用一个函数模板时，编译器会根据函数实参推断出模板实参，用推断出的模板参数为我们<strong>实例化（instantiate）</strong>一个特定版本的函数，编译器生成的版本通常被称为<strong>模板的实例（instantiation）</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//compare的函数模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> T&amp;v1,<span class=\"type\">const</span> T&amp;v2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v1 &lt; v2) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v2 &lt; v1) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当我们使用compare函数模板时</span></span><br><span class=\"line\">cout&lt;&lt;<span class=\"built_in\">compare</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>)&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译器实例化compare的实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;v1,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;v2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v1 &lt; v2) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v2 &lt; v1) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-3模板类型参数和非模板类型参数\"><a href=\"#1-3模板类型参数和非模板类型参数\" class=\"headerlink\" title=\"1.3模板类型参数和非模板类型参数\"></a>1.3模板类型参数和非模板类型参数</h5><p>模板类型参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>模板类型参数前面必须使用关键字<strong>typename</strong>或者<strong>class</strong>，**模板类型参数（template parameter)**可以看作为类型说明符，像内置类型和类类型一样使用。</p>\n<p><font color = gree>非模板类型参数</font></p>\n<p><font color= gree>非模板类型参数可以是一个整型、指向对象或函数类型的指针或者引用，绑定到非类型整型参数必须是一个常量表达式，绑定到指针或引用非类型参数的实参必须具有静态的生存期,不能用一个普通的局部变量或动态对象作为指针或引用类型模板参数的实参。在需要常量表达式的地方，可以使用非类型参数，比如数组的大小</font></p>\n<p><font color  = red>Note：非模板类型参数必须是常量表达式</font></p>\n<p>函数模板可以声明<strong>inline</strong>和<strong>constexpr</strong>，放在模板参数列表之后，返回类型之前。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;v1,<span class=\"type\">const</span> T &amp;v2)</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-4尽量编写类型无关的代码\"><a href=\"#1-4尽量编写类型无关的代码\" class=\"headerlink\" title=\"1.4尽量编写类型无关的代码\"></a>1.4尽量编写类型无关的代码</h5><p>如上面compare函数例子，编写泛型编程代码的两个重要原则：</p>\n<ol>\n<li>模板中的函数参数是const的引用；（可以保证函数可以用不能拷贝的类型）</li>\n<li>函数体中的条件判断仅使用&lt;比较运算；（可以降低对要处理的类型的要求）</li>\n</ol>\n<p><font color = red>Best Practices:模板程序应该尽量减少对实参类型的要求</font></p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-23-04%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91.png\">)</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-05.png\" alt=\"img\"></p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-50.png\" alt=\"img\"></p>\n<h3 id=\"2类模板定义\"><a href=\"#2类模板定义\" class=\"headerlink\" title=\"2类模板定义\"></a>2类模板定义</h3><h5 id=\"2-1类模板\"><a href=\"#2-1类模板\" class=\"headerlink\" title=\"2.1类模板\"></a>2.1类模板</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">类的定义</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blob</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> T value_type:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> std::vector&lt;T&gt;::size_type size_type;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Blob</span>();</span><br><span class=\"line\">    <span class=\"built_in\">Blob</span>(std::initializer_list&lt;T&gt; il);</span><br><span class=\"line\">    <span class=\"comment\">//Blob中的元素数目</span></span><br><span class=\"line\">    <span class=\"function\">size_type <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> data-&gt;<span class=\"built_in\">size</span>();&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span>  <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> data-&gt;<span class=\"built_in\">empty</span>();&#125;</span><br><span class=\"line\">    <span class=\"comment\">//添加和删除元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pysh_back</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;t)</span> </span>&#123;data-&gt;<span class=\"built_in\">push_back</span>(t);&#125;</span><br><span class=\"line\">    <span class=\"comment\">//移动版本</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(T &amp;&amp;t)</span> </span>&#123;data-&gt;<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(t));</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  \t<span class=\"comment\">//元素访问</span></span></span><br><span class=\"line\"><span class=\"function\">    T&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[](size_type i);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::shared_ptr&lt;std::vector&lt;T&gt;&gt; data;</span><br><span class=\"line\">    <span class=\"comment\">//若data[i]无效，则抛出msg</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">check</span><span class=\"params\">(size_)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color = red>size_type是string和vector类类型定义的类型，用来保存string和vector对象的长度，标准库类型将size_type定义为unsigned类型。</font></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模板定义\"><a href=\"#模板定义\" class=\"headerlink\" title=\"模板定义\"></a>模板定义</h2><h3 id=\"1函数模板定义\"><a href=\"#1函数模板定义\" class=\"headerlink\" title=\"1函数模板定义\"></a>1函数模板定义</h3><h5 id=\"1-1函数模板\"><a href=\"#1-1函数模板\" class=\"headerlink\" title=\"1.1函数模板\"></a>1.1函数模板</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">typename</span> U&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>模板定义</strong>以关键字<strong>template</strong>开始，后面跟着一个<strong>模板参数列表（template parameter list</strong>），<strong>模板参数（template parameter）</strong>用逗号分隔开，用小于号**&lt;**和大于号**&gt;**包围起来。</p>\n<p><strong><font color = red>Note：模板参数列表不能为空</font></strong></p>\n<h5 id=\"1-2实例化函数模板\"><a href=\"#1-2实例化函数模板\" class=\"headerlink\" title=\"1.2实例化函数模板\"></a>1.2实例化函数模板</h5><p>当我们调用一个函数模板时，编译器会根据函数实参推断出模板实参，用推断出的模板参数为我们<strong>实例化（instantiate）</strong>一个特定版本的函数，编译器生成的版本通常被称为<strong>模板的实例（instantiation）</strong>。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//compare的函数模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> T&amp;v1,<span class=\"type\">const</span> T&amp;v2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v1 &lt; v2) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v2 &lt; v1) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当我们使用compare函数模板时</span></span><br><span class=\"line\">cout&lt;&lt;<span class=\"built_in\">compare</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>)&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译器实例化compare的实例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;v1,<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;v2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v1 &lt; v2) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(v2 &lt; v1) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-3模板类型参数和非模板类型参数\"><a href=\"#1-3模板类型参数和非模板类型参数\" class=\"headerlink\" title=\"1.3模板类型参数和非模板类型参数\"></a>1.3模板类型参数和非模板类型参数</h5><p>模板类型参数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T,<span class=\"keyword\">class</span> <span class=\"title class_\">U</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>模板类型参数前面必须使用关键字<strong>typename</strong>或者<strong>class</strong>，**模板类型参数（template parameter)**可以看作为类型说明符，像内置类型和类类型一样使用。</p>\n<p><font color = gree>非模板类型参数</font></p>\n<p><font color= gree>非模板类型参数可以是一个整型、指向对象或函数类型的指针或者引用，绑定到非类型整型参数必须是一个常量表达式，绑定到指针或引用非类型参数的实参必须具有静态的生存期,不能用一个普通的局部变量或动态对象作为指针或引用类型模板参数的实参。在需要常量表达式的地方，可以使用非类型参数，比如数组的大小</font></p>\n<p><font color  = red>Note：非模板类型参数必须是常量表达式</font></p>\n<p>函数模板可以声明<strong>inline</strong>和<strong>constexpr</strong>，放在模板参数列表之后，返回类型之前。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;v1,<span class=\"type\">const</span> T &amp;v2)</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-4尽量编写类型无关的代码\"><a href=\"#1-4尽量编写类型无关的代码\" class=\"headerlink\" title=\"1.4尽量编写类型无关的代码\"></a>1.4尽量编写类型无关的代码</h5><p>如上面compare函数例子，编写泛型编程代码的两个重要原则：</p>\n<ol>\n<li>模板中的函数参数是const的引用；（可以保证函数可以用不能拷贝的类型）</li>\n<li>函数体中的条件判断仅使用&lt;比较运算；（可以降低对要处理的类型的要求）</li>\n</ol>\n<p><font color = red>Best Practices:模板程序应该尽量减少对实参类型的要求</font></p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-23-04%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91.png\">)</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-05.png\" alt=\"img\"></p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-11-21_15-24-50.png\" alt=\"img\"></p>\n<h3 id=\"2类模板定义\"><a href=\"#2类模板定义\" class=\"headerlink\" title=\"2类模板定义\"></a>2类模板定义</h3><h5 id=\"2-1类模板\"><a href=\"#2-1类模板\" class=\"headerlink\" title=\"2.1类模板\"></a>2.1类模板</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">类的定义</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Blob</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> T value_type:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> std::vector&lt;T&gt;::size_type size_type;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"built_in\">Blob</span>();</span><br><span class=\"line\">    <span class=\"built_in\">Blob</span>(std::initializer_list&lt;T&gt; il);</span><br><span class=\"line\">    <span class=\"comment\">//Blob中的元素数目</span></span><br><span class=\"line\">    <span class=\"function\">size_type <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> data-&gt;<span class=\"built_in\">size</span>();&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span>  <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;<span class=\"keyword\">return</span> data-&gt;<span class=\"built_in\">empty</span>();&#125;</span><br><span class=\"line\">    <span class=\"comment\">//添加和删除元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pysh_back</span><span class=\"params\">(<span class=\"type\">const</span> T &amp;t)</span> </span>&#123;data-&gt;<span class=\"built_in\">push_back</span>(t);&#125;</span><br><span class=\"line\">    <span class=\"comment\">//移动版本</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_back</span><span class=\"params\">(T &amp;&amp;t)</span> </span>&#123;data-&gt;<span class=\"built_in\">push_back</span>(std::<span class=\"built_in\">move</span>(t));</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">pop_back</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  \t<span class=\"comment\">//元素访问</span></span></span><br><span class=\"line\"><span class=\"function\">    T&amp; <span class=\"title\">back</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    T&amp; <span class=\"keyword\">operator</span>[](size_type i);</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::shared_ptr&lt;std::vector&lt;T&gt;&gt; data;</span><br><span class=\"line\">    <span class=\"comment\">//若data[i]无效，则抛出msg</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">check</span><span class=\"params\">(size_)</span></span></span><br><span class=\"line\"><span class=\"function\">        </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><font color = red>size_type是string和vector类类型定义的类型，用来保存string和vector对象的长度，标准库类型将size_type定义为unsigned类型。</font></p>\n"},{"title":"数据结构-查找-有序表","date":"2023-12-04T15:16:03.000Z","_content":"# 查找\n\n**查找表（Search Table）**是由同一类型的数据元素（或记录）构成的集合。\n\n**关键字（Key）**是数据元素中某个数据项的值，又称为键值，用它可以标识一个数据元素。也可以标识一个记录的某个数据项（字段），称为关键码。若此关键字可以唯一地标识一个记录，则此关键字称为**主关键字（Primary Key）**；对于可以识别多个元素的关键字，称为**次关键字（Secondary Key)。**\n\n\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_18-38-21%20%E6%9F%A5%E6%89%BE.png)\n\n**静态查找表（Static Search Table）**：只作查找的查找表。\n\n（1）查询某个“特定的“数据元素是否在查找表中。\n\n（2）检索某个”特定的“数据元素和各种属性。\n\n**动态查找表（Dynamic Search Table）：**在查找过程中同时插入查找表中不存在的数据元素，或者冲查找表中删除已经存在的某个数据元素。\n\n（1）查找时插入数据元素\n\n（2）查找时删除数据元素\n\n### 顺序表查找\n\n**顺序查找（Sequential Search）**又叫线性查找。\n\n基本思想：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功。反之，查找失败。\n\n```C++\n//顺序表查找算法\nint Sequential_Search(const int *array,const int size,const int key)\n{\n    for(int i = 1;i<=n;i++)\n    {\n        if(array[i]==key)\n            return i;\n    }\n    return 0;\n}\n//查找成功返回关键字下标，查找失败返回0\n```\n\n顺序表查找优化：在顺序表查找的基础上设置一个哨兵，因为上面的算法每次循环都需要判断是否越界，即i是否小于n作比较，设置哨兵，可以不需要每次比较。\n\n```C++\nint Sequential_Search(const int *array,const int size,const int key)\n{\n    array[0] =key;\t\t//将array[0]设置为哨兵\n    int i = size;\n    while(array[i]!=key)\n        i--;\n    return i;\t\t//返回0则查找失败\n}\n```\n\n时间复杂度：\n\n查找成功：O(n)。最优只需要查找1次，最差需要查找n次，关键字在任何位置的概率相同，平均查找次数（n+1)/2。\n\n查找失败：O(n)。需要查找n+1次。\n\n### 有序表查找\n\n##### 折半查找\n\n**折半查找（Binary Search)**，又称为二分查找。线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须是采用顺序存储。\n\n基本思想：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功；或所有查找区域无记录，查找失败为止。\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_19-49-52%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png)\n\n```C++\nint Binary_Search(const int *array,const int size,const int key)\n{\n    int left =1,right = size;\t//定义left为记录首位，right为记录某位\n    while(left<=right)\n    {\n        int mid = (left+right)/2;\t\t//折半，定义mid记录中值\n        if(key == array[mid])\t\t\t//若中值等于key则查找成功\n            return mid;\t\t\t\t\t\n        else(key<array[mid])\t\t\t//若key比中值小，则在左半区\n            right = mid - 1;\t\t\t//right调整到中值左边一位\n        else \t\t\t\t\t\t\t//若key比中值大，则在右半区\n            left= = mid +1;\t\t\t\t//left调整到中值右边一位\n    }\n    return 0;\n}\n```\n\n算法复杂度:\n\n查找成功：O(logn)\n\n查找失败：O(logn)\n\n##### 插值查找\n\n**插值查找（Interpolation Search）**是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法。\n\n基本思想：和二分查找一样，不同的是不与中值比较，用插值的计算公式替代取中值。\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_20-27-02%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E5%85%AC%E5%BC%8F.png)\n\n```C++\nint Binary_Search(const int *array,const int size,const int key)\n{\n    int left =1,right = size;\t//定义left为记录首位，right为记录某位\n    while(left<=right)\n    {\n        int mid = low + (high-low)*(key -a[left])/(a[right]-\t\t\t\t\ta[left]);\t\t\n        if(key == array[mid])\t\t\t\n            return mid;\t\t\t\t\t\n        else(key<array[mid])\t\t\t\n            right = mid - 1;\t\t\t\n        else \t\t\t\t\t\t\t\n            left= = mid +1;\t\t\t\t\n    }\n    return 0;\n}\n```\n\n算法复杂度也是O(logn)，**但是对于表长比较大，关键字分布有比较均匀的查找表来说，插值查找算法的平均性能比折半查找好得多。**\n\n##### 斐波那契查找\n\n```C++\n//构造斐波那契数组\nvoid Fibonacci（int *f)\n{\n    f[0]= 0;\n    f[1] = 1;\n    f[2] = 2;\n    for(int i = 3;i<MAX_SIZE;i++)\n    {\n    \tf[i] = f[i-1] + f[i-2];\n    }\n}\nint Fibonacci_Search(const int* array,const int size,const int key)\n{\n    int f[MAX_SIZE];\n    Fibonacci(f);\t\t//构造一个Fibonacci数组\n    int k = 0;\n    while(f[k]-1<size)\n        k++;\n    for(int i = size+1;i<f[k];i++)\n        array[i] = array[size];\n    int low,high,mid;\n    low = 1;\n    high = size;\n    while(low<=high)\n    {\n        mid = low +f[k-1]-1;\n        if(array[mid]==key)\n        {\n            if(mid<=size)\n            \treturn mid;\n            else\n                return size;\n        }\n        else(key<array[mid])\n        {\n            high = mid-1;            \n            k--;\n        }\n        else\n        {\n            low = mid+1;\n            k-=2;\n        }\n    }\n    return 0;\n}\n```\n\n斐波那契查找算法的核心：\n\n（1）当key=array[mid]时，查找成功；\n\n（2）当key<array[mid]时，新范围是[low,mid-1],范围个数为f[k-1]-1;\n\n（3）当key>array[mid]时，新范围是[mid+1,high],范围个数为f[k-2]-1;\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-02-09%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE.png)\n\n斐波那契数组{1，1，2，3，5,...,f[n]},从第三个数开始，等于前两个数的和。\n\nF[n] = F[n-1]+[n-2]\n\n斐波那契黄金分割，斐波那契数组的值越往后，f[n-1]/f[n]比值越接近黄金分割比例约等于0.618。\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-08-18%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.png)\n\n基本思想和二分查找一样，中值换成上面的公式。\n\n","source":"_posts/数据结构-查找-有序表.md","raw":"---\ntitle: 数据结构-查找-有序表\ndate: 2023-12-04 23:16:03\ntags: 算法\ncategories: 大话数据结构\n---\n# 查找\n\n**查找表（Search Table）**是由同一类型的数据元素（或记录）构成的集合。\n\n**关键字（Key）**是数据元素中某个数据项的值，又称为键值，用它可以标识一个数据元素。也可以标识一个记录的某个数据项（字段），称为关键码。若此关键字可以唯一地标识一个记录，则此关键字称为**主关键字（Primary Key）**；对于可以识别多个元素的关键字，称为**次关键字（Secondary Key)。**\n\n\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_18-38-21%20%E6%9F%A5%E6%89%BE.png)\n\n**静态查找表（Static Search Table）**：只作查找的查找表。\n\n（1）查询某个“特定的“数据元素是否在查找表中。\n\n（2）检索某个”特定的“数据元素和各种属性。\n\n**动态查找表（Dynamic Search Table）：**在查找过程中同时插入查找表中不存在的数据元素，或者冲查找表中删除已经存在的某个数据元素。\n\n（1）查找时插入数据元素\n\n（2）查找时删除数据元素\n\n### 顺序表查找\n\n**顺序查找（Sequential Search）**又叫线性查找。\n\n基本思想：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功。反之，查找失败。\n\n```C++\n//顺序表查找算法\nint Sequential_Search(const int *array,const int size,const int key)\n{\n    for(int i = 1;i<=n;i++)\n    {\n        if(array[i]==key)\n            return i;\n    }\n    return 0;\n}\n//查找成功返回关键字下标，查找失败返回0\n```\n\n顺序表查找优化：在顺序表查找的基础上设置一个哨兵，因为上面的算法每次循环都需要判断是否越界，即i是否小于n作比较，设置哨兵，可以不需要每次比较。\n\n```C++\nint Sequential_Search(const int *array,const int size,const int key)\n{\n    array[0] =key;\t\t//将array[0]设置为哨兵\n    int i = size;\n    while(array[i]!=key)\n        i--;\n    return i;\t\t//返回0则查找失败\n}\n```\n\n时间复杂度：\n\n查找成功：O(n)。最优只需要查找1次，最差需要查找n次，关键字在任何位置的概率相同，平均查找次数（n+1)/2。\n\n查找失败：O(n)。需要查找n+1次。\n\n### 有序表查找\n\n##### 折半查找\n\n**折半查找（Binary Search)**，又称为二分查找。线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须是采用顺序存储。\n\n基本思想：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功；或所有查找区域无记录，查找失败为止。\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_19-49-52%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png)\n\n```C++\nint Binary_Search(const int *array,const int size,const int key)\n{\n    int left =1,right = size;\t//定义left为记录首位，right为记录某位\n    while(left<=right)\n    {\n        int mid = (left+right)/2;\t\t//折半，定义mid记录中值\n        if(key == array[mid])\t\t\t//若中值等于key则查找成功\n            return mid;\t\t\t\t\t\n        else(key<array[mid])\t\t\t//若key比中值小，则在左半区\n            right = mid - 1;\t\t\t//right调整到中值左边一位\n        else \t\t\t\t\t\t\t//若key比中值大，则在右半区\n            left= = mid +1;\t\t\t\t//left调整到中值右边一位\n    }\n    return 0;\n}\n```\n\n算法复杂度:\n\n查找成功：O(logn)\n\n查找失败：O(logn)\n\n##### 插值查找\n\n**插值查找（Interpolation Search）**是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法。\n\n基本思想：和二分查找一样，不同的是不与中值比较，用插值的计算公式替代取中值。\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_20-27-02%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E5%85%AC%E5%BC%8F.png)\n\n```C++\nint Binary_Search(const int *array,const int size,const int key)\n{\n    int left =1,right = size;\t//定义left为记录首位，right为记录某位\n    while(left<=right)\n    {\n        int mid = low + (high-low)*(key -a[left])/(a[right]-\t\t\t\t\ta[left]);\t\t\n        if(key == array[mid])\t\t\t\n            return mid;\t\t\t\t\t\n        else(key<array[mid])\t\t\t\n            right = mid - 1;\t\t\t\n        else \t\t\t\t\t\t\t\n            left= = mid +1;\t\t\t\t\n    }\n    return 0;\n}\n```\n\n算法复杂度也是O(logn)，**但是对于表长比较大，关键字分布有比较均匀的查找表来说，插值查找算法的平均性能比折半查找好得多。**\n\n##### 斐波那契查找\n\n```C++\n//构造斐波那契数组\nvoid Fibonacci（int *f)\n{\n    f[0]= 0;\n    f[1] = 1;\n    f[2] = 2;\n    for(int i = 3;i<MAX_SIZE;i++)\n    {\n    \tf[i] = f[i-1] + f[i-2];\n    }\n}\nint Fibonacci_Search(const int* array,const int size,const int key)\n{\n    int f[MAX_SIZE];\n    Fibonacci(f);\t\t//构造一个Fibonacci数组\n    int k = 0;\n    while(f[k]-1<size)\n        k++;\n    for(int i = size+1;i<f[k];i++)\n        array[i] = array[size];\n    int low,high,mid;\n    low = 1;\n    high = size;\n    while(low<=high)\n    {\n        mid = low +f[k-1]-1;\n        if(array[mid]==key)\n        {\n            if(mid<=size)\n            \treturn mid;\n            else\n                return size;\n        }\n        else(key<array[mid])\n        {\n            high = mid-1;            \n            k--;\n        }\n        else\n        {\n            low = mid+1;\n            k-=2;\n        }\n    }\n    return 0;\n}\n```\n\n斐波那契查找算法的核心：\n\n（1）当key=array[mid]时，查找成功；\n\n（2）当key<array[mid]时，新范围是[low,mid-1],范围个数为f[k-1]-1;\n\n（3）当key>array[mid]时，新范围是[mid+1,high],范围个数为f[k-2]-1;\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-02-09%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE.png)\n\n斐波那契数组{1，1，2，3，5,...,f[n]},从第三个数开始，等于前两个数的和。\n\nF[n] = F[n-1]+[n-2]\n\n斐波那契黄金分割，斐波那契数组的值越往后，f[n-1]/f[n]比值越接近黄金分割比例约等于0.618。\n\n![img](https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-08-18%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.png)\n\n基本思想和二分查找一样，中值换成上面的公式。\n\n","slug":"数据结构-查找-有序表","published":1,"updated":"2023-12-04T15:18:00.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clpr2384z0000n4uc3t7v23d5","content":"<h1 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h1><p><strong>查找表（Search Table）</strong>是由同一类型的数据元素（或记录）构成的集合。</p>\n<p><strong>关键字（Key）</strong>是数据元素中某个数据项的值，又称为键值，用它可以标识一个数据元素。也可以标识一个记录的某个数据项（字段），称为关键码。若此关键字可以唯一地标识一个记录，则此关键字称为<strong>主关键字（Primary Key）</strong>；对于可以识别多个元素的关键字，称为<strong>次关键字（Secondary Key)。</strong></p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_18-38-21%20%E6%9F%A5%E6%89%BE.png\" alt=\"img\"></p>\n<p><strong>静态查找表（Static Search Table）</strong>：只作查找的查找表。</p>\n<p>（1）查询某个“特定的“数据元素是否在查找表中。</p>\n<p>（2）检索某个”特定的“数据元素和各种属性。</p>\n<p><strong>动态查找表（Dynamic Search Table）：</strong>在查找过程中同时插入查找表中不存在的数据元素，或者冲查找表中删除已经存在的某个数据元素。</p>\n<p>（1）查找时插入数据元素</p>\n<p>（2）查找时删除数据元素</p>\n<h3 id=\"顺序表查找\"><a href=\"#顺序表查找\" class=\"headerlink\" title=\"顺序表查找\"></a>顺序表查找</h3><p><strong>顺序查找（Sequential Search）</strong>又叫线性查找。</p>\n<p>基本思想：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功。反之，查找失败。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表查找算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Sequential_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[i]==key)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找成功返回关键字下标，查找失败返回0</span></span><br></pre></td></tr></table></figure>\n\n<p>顺序表查找优化：在顺序表查找的基础上设置一个哨兵，因为上面的算法每次循环都需要判断是否越界，即i是否小于n作比较，设置哨兵，可以不需要每次比较。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Sequential_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    array[<span class=\"number\">0</span>] =key;\t\t<span class=\"comment\">//将array[0]设置为哨兵</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(array[i]!=key)</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;\t\t<span class=\"comment\">//返回0则查找失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：</p>\n<p>查找成功：O(n)。最优只需要查找1次，最差需要查找n次，关键字在任何位置的概率相同，平均查找次数（n+1)&#x2F;2。</p>\n<p>查找失败：O(n)。需要查找n+1次。</p>\n<h3 id=\"有序表查找\"><a href=\"#有序表查找\" class=\"headerlink\" title=\"有序表查找\"></a>有序表查找</h3><h5 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h5><p>**折半查找（Binary Search)**，又称为二分查找。线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须是采用顺序存储。</p>\n<p>基本思想：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功；或所有查找区域无记录，查找失败为止。</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_19-49-52%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png\" alt=\"img\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Binary_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left =<span class=\"number\">1</span>,right = size;\t<span class=\"comment\">//定义left为记录首位，right为记录某位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (left+right)/<span class=\"number\">2</span>;\t\t<span class=\"comment\">//折半，定义mid记录中值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key == array[mid])\t\t\t<span class=\"comment\">//若中值等于key则查找成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;\t\t\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">else</span>(key&lt;array[mid])\t\t\t<span class=\"comment\">//若key比中值小，则在左半区</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//right调整到中值左边一位</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> \t\t\t\t\t\t\t<span class=\"comment\">//若key比中值大，则在右半区</span></span><br><span class=\"line\">            left= = mid +<span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//left调整到中值右边一位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算法复杂度:</p>\n<p>查找成功：O(logn)</p>\n<p>查找失败：O(logn)</p>\n<h5 id=\"插值查找\"><a href=\"#插值查找\" class=\"headerlink\" title=\"插值查找\"></a>插值查找</h5><p><strong>插值查找（Interpolation Search）</strong>是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法。</p>\n<p>基本思想：和二分查找一样，不同的是不与中值比较，用插值的计算公式替代取中值。</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_20-27-02%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E5%85%AC%E5%BC%8F.png\" alt=\"img\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Binary_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left =<span class=\"number\">1</span>,right = size;\t<span class=\"comment\">//定义left为记录首位，right为记录某位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = low + (high-low)*(key -a[left])/(a[right]-\t\t\t\t\ta[left]);\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key == array[mid])\t\t\t</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;\t\t\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">else</span>(key&lt;array[mid])\t\t\t</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">else</span> \t\t\t\t\t\t\t</span><br><span class=\"line\">            left= = mid +<span class=\"number\">1</span>;\t\t\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算法复杂度也是O(logn)，<strong>但是对于表长比较大，关键字分布有比较均匀的查找表来说，插值查找算法的平均性能比折半查找好得多。</strong></p>\n<h5 id=\"斐波那契查找\"><a href=\"#斐波那契查找\" class=\"headerlink\" title=\"斐波那契查找\"></a>斐波那契查找</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造斐波那契数组</span></span><br><span class=\"line\"><span class=\"type\">void</span> Fibonacci（<span class=\"type\">int</span> *f)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]= <span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    f[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i&lt;MAX_SIZE;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tf[i] = f[i<span class=\"number\">-1</span>] + f[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Fibonacci_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>* array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f[MAX_SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">Fibonacci</span>(f);\t\t<span class=\"comment\">//构造一个Fibonacci数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(f[k]<span class=\"number\">-1</span>&lt;size)</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = size+<span class=\"number\">1</span>;i&lt;f[k];i++)</span><br><span class=\"line\">        array[i] = array[size];</span><br><span class=\"line\">    <span class=\"type\">int</span> low,high,mid;</span><br><span class=\"line\">    low = <span class=\"number\">1</span>;</span><br><span class=\"line\">    high = size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = low +f[k<span class=\"number\">-1</span>]<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[mid]==key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid&lt;=size)</span><br><span class=\"line\">            \t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>(key&lt;array[mid])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;            </span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            k-=<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>斐波那契查找算法的核心：</p>\n<p>（1）当key&#x3D;array[mid]时，查找成功；</p>\n<p>（2）当key&lt;array[mid]时，新范围是[low,mid-1],范围个数为f[k-1]-1;</p>\n<p>（3）当key&gt;array[mid]时，新范围是[mid+1,high],范围个数为f[k-2]-1;</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-02-09%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE.png\" alt=\"img\"></p>\n<p>斐波那契数组{1，1，2，3，5,…,f[n]},从第三个数开始，等于前两个数的和。</p>\n<p>F[n] &#x3D; F[n-1]+[n-2]</p>\n<p>斐波那契黄金分割，斐波那契数组的值越往后，f[n-1]&#x2F;f[n]比值越接近黄金分割比例约等于0.618。</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-08-18%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.png\" alt=\"img\"></p>\n<p>基本思想和二分查找一样，中值换成上面的公式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h1><p><strong>查找表（Search Table）</strong>是由同一类型的数据元素（或记录）构成的集合。</p>\n<p><strong>关键字（Key）</strong>是数据元素中某个数据项的值，又称为键值，用它可以标识一个数据元素。也可以标识一个记录的某个数据项（字段），称为关键码。若此关键字可以唯一地标识一个记录，则此关键字称为<strong>主关键字（Primary Key）</strong>；对于可以识别多个元素的关键字，称为<strong>次关键字（Secondary Key)。</strong></p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_18-38-21%20%E6%9F%A5%E6%89%BE.png\" alt=\"img\"></p>\n<p><strong>静态查找表（Static Search Table）</strong>：只作查找的查找表。</p>\n<p>（1）查询某个“特定的“数据元素是否在查找表中。</p>\n<p>（2）检索某个”特定的“数据元素和各种属性。</p>\n<p><strong>动态查找表（Dynamic Search Table）：</strong>在查找过程中同时插入查找表中不存在的数据元素，或者冲查找表中删除已经存在的某个数据元素。</p>\n<p>（1）查找时插入数据元素</p>\n<p>（2）查找时删除数据元素</p>\n<h3 id=\"顺序表查找\"><a href=\"#顺序表查找\" class=\"headerlink\" title=\"顺序表查找\"></a>顺序表查找</h3><p><strong>顺序查找（Sequential Search）</strong>又叫线性查找。</p>\n<p>基本思想：从表中第一个（或最后一个）记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功。反之，查找失败。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//顺序表查找算法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Sequential_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[i]==key)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//查找成功返回关键字下标，查找失败返回0</span></span><br></pre></td></tr></table></figure>\n\n<p>顺序表查找优化：在顺序表查找的基础上设置一个哨兵，因为上面的算法每次循环都需要判断是否越界，即i是否小于n作比较，设置哨兵，可以不需要每次比较。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Sequential_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    array[<span class=\"number\">0</span>] =key;\t\t<span class=\"comment\">//将array[0]设置为哨兵</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(array[i]!=key)</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;\t\t<span class=\"comment\">//返回0则查找失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：</p>\n<p>查找成功：O(n)。最优只需要查找1次，最差需要查找n次，关键字在任何位置的概率相同，平均查找次数（n+1)&#x2F;2。</p>\n<p>查找失败：O(n)。需要查找n+1次。</p>\n<h3 id=\"有序表查找\"><a href=\"#有序表查找\" class=\"headerlink\" title=\"有序表查找\"></a>有序表查找</h3><h5 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h5><p>**折半查找（Binary Search)**，又称为二分查找。线性表中的记录必须是关键码有序（通常从小到大有序），线性表必须是采用顺序存储。</p>\n<p>基本思想：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功；若给定值小于中间记录的关键字，则在中间记录的左半区继续查找；若给定值大于中间记录的关键字，则在中间记录的右半区继续查找。不断重复上述过程，直到查找成功；或所有查找区域无记录，查找失败为止。</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_19-49-52%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png\" alt=\"img\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Binary_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left =<span class=\"number\">1</span>,right = size;\t<span class=\"comment\">//定义left为记录首位，right为记录某位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (left+right)/<span class=\"number\">2</span>;\t\t<span class=\"comment\">//折半，定义mid记录中值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key == array[mid])\t\t\t<span class=\"comment\">//若中值等于key则查找成功</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;\t\t\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">else</span>(key&lt;array[mid])\t\t\t<span class=\"comment\">//若key比中值小，则在左半区</span></span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//right调整到中值左边一位</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> \t\t\t\t\t\t\t<span class=\"comment\">//若key比中值大，则在右半区</span></span><br><span class=\"line\">            left= = mid +<span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//left调整到中值右边一位</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算法复杂度:</p>\n<p>查找成功：O(logn)</p>\n<p>查找失败：O(logn)</p>\n<h5 id=\"插值查找\"><a href=\"#插值查找\" class=\"headerlink\" title=\"插值查找\"></a>插值查找</h5><p><strong>插值查找（Interpolation Search）</strong>是根据要查找的关键字key与查找表中最大最小记录的关键字比较后的查找方法。</p>\n<p>基本思想：和二分查找一样，不同的是不与中值比较，用插值的计算公式替代取中值。</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_20-27-02%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE%E5%85%AC%E5%BC%8F.png\" alt=\"img\"></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Binary_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> *array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left =<span class=\"number\">1</span>,right = size;\t<span class=\"comment\">//定义left为记录首位，right为记录某位</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = low + (high-low)*(key -a[left])/(a[right]-\t\t\t\t\ta[left]);\t\t</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(key == array[mid])\t\t\t</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;\t\t\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">else</span>(key&lt;array[mid])\t\t\t</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">else</span> \t\t\t\t\t\t\t</span><br><span class=\"line\">            left= = mid +<span class=\"number\">1</span>;\t\t\t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>算法复杂度也是O(logn)，<strong>但是对于表长比较大，关键字分布有比较均匀的查找表来说，插值查找算法的平均性能比折半查找好得多。</strong></p>\n<h5 id=\"斐波那契查找\"><a href=\"#斐波那契查找\" class=\"headerlink\" title=\"斐波那契查找\"></a>斐波那契查找</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//构造斐波那契数组</span></span><br><span class=\"line\"><span class=\"type\">void</span> Fibonacci（<span class=\"type\">int</span> *f)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>]= <span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    f[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i&lt;MAX_SIZE;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \tf[i] = f[i<span class=\"number\">-1</span>] + f[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Fibonacci_Search</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>* array,<span class=\"type\">const</span> <span class=\"type\">int</span> size,<span class=\"type\">const</span> <span class=\"type\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> f[MAX_SIZE];</span><br><span class=\"line\">    <span class=\"built_in\">Fibonacci</span>(f);\t\t<span class=\"comment\">//构造一个Fibonacci数组</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(f[k]<span class=\"number\">-1</span>&lt;size)</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = size+<span class=\"number\">1</span>;i&lt;f[k];i++)</span><br><span class=\"line\">        array[i] = array[size];</span><br><span class=\"line\">    <span class=\"type\">int</span> low,high,mid;</span><br><span class=\"line\">    low = <span class=\"number\">1</span>;</span><br><span class=\"line\">    high = size;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low&lt;=high)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = low +f[k<span class=\"number\">-1</span>]<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[mid]==key)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mid&lt;=size)</span><br><span class=\"line\">            \t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>(key&lt;array[mid])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            high = mid<span class=\"number\">-1</span>;            </span><br><span class=\"line\">            k--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            k-=<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>斐波那契查找算法的核心：</p>\n<p>（1）当key&#x3D;array[mid]时，查找成功；</p>\n<p>（2）当key&lt;array[mid]时，新范围是[low,mid-1],范围个数为f[k-1]-1;</p>\n<p>（3）当key&gt;array[mid]时，新范围是[mid+1,high],范围个数为f[k-2]-1;</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-02-09%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE.png\" alt=\"img\"></p>\n<p>斐波那契数组{1，1，2，3，5,…,f[n]},从第三个数开始，等于前两个数的和。</p>\n<p>F[n] &#x3D; F[n-1]+[n-2]</p>\n<p>斐波那契黄金分割，斐波那契数组的值越往后，f[n-1]&#x2F;f[n]比值越接近黄金分割比例约等于0.618。</p>\n<p><img src=\"https://hexoimagebed.oss-cn-shanghai.aliyuncs.com/images/Snipaste_2023-12-04_23-08-18%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91.png\" alt=\"img\"></p>\n<p>基本思想和二分查找一样，中值换成上面的公式。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clopvba1l0001akuc1mfo09um","category_id":"clopvba1r0004akuch7q11clw","_id":"clopvba1u0009akuca5pter2q"},{"post_id":"clopvba1p0003akuc3ixcfabj","category_id":"clopvba1t0006akucfuwohpsj","_id":"clopvba1u000bakuc1hmogi88"},{"post_id":"clp83w7120000k0uc7ptfa576","category_id":"clopvba1r0004akuch7q11clw","_id":"clp83w7150002k0uc66zja9av"},{"post_id":"clpr2384z0000n4uc3t7v23d5","category_id":"clpr238520001n4ucgel0a1oa","_id":"clpr238540003n4uc63rwbd8w"}],"PostTag":[{"post_id":"clopvba1l0001akuc1mfo09um","tag_id":"clopvba1s0005akucgzof7bka","_id":"clopvba1u0008akuc5gc27c18"},{"post_id":"clopvba1p0003akuc3ixcfabj","tag_id":"clopvba1t0007akucdirega9z","_id":"clopvba1u000aakuc54rmcdir"},{"post_id":"clp83w7120000k0uc7ptfa576","tag_id":"clopvba1s0005akucgzof7bka","_id":"clp83w7150001k0uc3ugjfoge"},{"post_id":"clpr2384z0000n4uc3t7v23d5","tag_id":"clopvba1t0007akucdirega9z","_id":"clpr238540002n4ucg1gg1d2j"}],"Tag":[{"name":"C++","_id":"clopvba1s0005akucgzof7bka"},{"name":"算法","_id":"clopvba1t0007akucdirega9z"}]}}